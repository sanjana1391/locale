"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(req, res) {
    var signature, event, stripeProviderService, paymentIntent, manager, cartService, orderService, cartId, order;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            signature = req.headers["stripe-signature"];
            _context3.prev = 1;
            stripeProviderService = req.scope.resolve("pp_stripe");
            event = stripeProviderService.constructWebhookEvent(req.body, signature);
            _context3.next = 10;
            break;

          case 6:
            _context3.prev = 6;
            _context3.t0 = _context3["catch"](1);
            res.status(400).send("Webhook Error: ".concat(_context3.t0.message));
            return _context3.abrupt("return");

          case 10:
            paymentIntent = event.data.object;
            manager = req.scope.resolve("manager");
            cartService = req.scope.resolve("cartService");
            orderService = req.scope.resolve("orderService");
            cartId = paymentIntent.metadata.cart_id;
            _context3.next = 17;
            return orderService.retrieveByCartId(cartId)["catch"](function () {
              return undefined;
            });

          case 17:
            order = _context3.sent;
            _context3.t1 = event.type;
            _context3.next = _context3.t1 === "payment_intent.succeeded" ? 21 : _context3.t1 === "payment_intent.amount_capturable_updated" ? 25 : 29;
            break;

          case 21:
            if (!(order && order.payment_status !== "captured")) {
              _context3.next = 24;
              break;
            }

            _context3.next = 24;
            return manager.transaction( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(manager) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return orderService.withTransaction(manager).capturePayment(order.id);

                      case 2:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x3) {
                return _ref2.apply(this, arguments);
              };
            }());

          case 24:
            return _context3.abrupt("break", 31);

          case 25:
            if (order) {
              _context3.next = 28;
              break;
            }

            _context3.next = 28;
            return manager.transaction( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(manager) {
                var cartServiceTx;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        cartServiceTx = cartService.withTransaction(manager);
                        _context2.next = 3;
                        return cartServiceTx.setPaymentSession(cartId, "stripe");

                      case 3:
                        _context2.next = 5;
                        return cartServiceTx.authorizePayment(cartId);

                      case 5:
                        _context2.next = 7;
                        return orderService.withTransaction(manager).createFromCart(cartId);

                      case 7:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function (_x4) {
                return _ref3.apply(this, arguments);
              };
            }());

          case 28:
            return _context3.abrupt("break", 31);

          case 29:
            res.sendStatus(204);
            return _context3.abrupt("return");

          case 31:
            res.sendStatus(200);

          case 32:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[1, 6]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;