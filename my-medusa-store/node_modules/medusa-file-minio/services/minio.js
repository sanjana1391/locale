"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _stream = _interopRequireDefault(require("stream"));

var _awsSdk = _interopRequireDefault(require("aws-sdk"));

var _path = require("path");

var _fs = _interopRequireDefault(require("fs"));

var _medusa = require("@medusajs/medusa");

var _medusaCoreUtils = require("medusa-core-utils");

var _excluded = ["usePrivateBucket"],
    _excluded2 = ["usePrivateBucket"],
    _excluded3 = ["usePrivateBucket"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MinioService = /*#__PURE__*/function (_AbstractFileService) {
  _inherits(MinioService, _AbstractFileService);

  var _super = _createSuper(MinioService);

  function MinioService(_ref, options) {
    var _options$private_acce, _options$private_secr, _options$download_url;

    var _this;

    _objectDestructuringEmpty(_ref);

    _classCallCheck(this, MinioService);

    _this = _super.call(this, {}, options);
    _this.bucket_ = options.bucket;
    _this.accessKeyId_ = options.access_key_id;
    _this.secretAccessKey_ = options.secret_access_key;
    _this.private_bucket_ = options.private_bucket;
    _this.private_access_key_id_ = (_options$private_acce = options.private_access_key_id) !== null && _options$private_acce !== void 0 ? _options$private_acce : _this.accessKeyId_;
    _this.private_secret_access_key_ = (_options$private_secr = options.private_secret_access_key) !== null && _options$private_secr !== void 0 ? _options$private_secr : _this.secretAccessKey_;
    _this.endpoint_ = options.endpoint;
    _this.s3ForcePathStyle_ = true;
    _this.signatureVersion_ = "v4";
    _this.downloadUrlDuration = (_options$download_url = options.download_url_duration) !== null && _options$download_url !== void 0 ? _options$download_url : 60; // 60 seconds

    return _this;
  }

  _createClass(MinioService, [{
    key: "upload",
    value: function upload(file) {
      this.updateAwsConfig_();
      var parsedFilename = (0, _path.parse)(file.originalname);
      var fileKey = "".concat(parsedFilename.name, "-").concat(Date.now()).concat(parsedFilename.ext);
      var s3 = new _awsSdk["default"].S3();
      var params = {
        ACL: "public-read",
        Bucket: this.bucket_,
        Body: _fs["default"].createReadStream(file.path),
        Key: fileKey
      };
      return new Promise(function (resolve, reject) {
        s3.upload(params, function (err, data) {
          if (err) {
            reject(err);
            return;
          }

          resolve({
            url: data.Location,
            key: data.Key
          });
        });
      });
    }
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(file) {
        var _this2 = this;

        var s3, params;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.updateAwsConfig_();
                s3 = new _awsSdk["default"].S3();
                params = {
                  Bucket: this.bucket_,
                  Key: "".concat(file.fileKey)
                };
                _context.next = 5;
                return Promise.all([new Promise(function (resolve, reject) {
                  return s3.deleteObject(_objectSpread(_objectSpread({}, params), {}, {
                    Bucket: _this2.bucket_
                  }), function (err, data) {
                    if (err) {
                      reject(err);
                      return;
                    }

                    resolve(data);
                  });
                }), new Promise(function (resolve, reject) {
                  return s3.deleteObject(_objectSpread(_objectSpread({}, params), {}, {
                    Bucket: _this2.private_bucket_
                  }), function (err, data) {
                    if (err) {
                      reject(err);
                      return;
                    }

                    resolve(data);
                  });
                })]);

              case 5:
                return _context.abrupt("return", _context.sent);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _delete(_x) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "getUploadStreamDescriptor",
    value: function () {
      var _getUploadStreamDescriptor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2) {
        var _ref2$usePrivateBucke, usePrivateBucket, fileData, pass, fileKey, params, s3;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref2$usePrivateBucke = _ref2.usePrivateBucket, usePrivateBucket = _ref2$usePrivateBucke === void 0 ? true : _ref2$usePrivateBucke, fileData = _objectWithoutProperties(_ref2, _excluded);
                this.validatePrivateBucketConfiguration_(usePrivateBucket);
                this.updateAwsConfig_(usePrivateBucket);
                pass = new _stream["default"].PassThrough();
                fileKey = "".concat(fileData.name, ".").concat(fileData.ext);
                params = {
                  Bucket: usePrivateBucket ? this.private_bucket_ : this.bucket_,
                  Body: pass,
                  Key: fileKey
                };
                s3 = new _awsSdk["default"].S3();
                return _context2.abrupt("return", {
                  writeStream: pass,
                  promise: s3.upload(params).promise(),
                  url: "".concat(this.spacesUrl_, "/").concat(fileKey),
                  fileKey: fileKey
                });

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getUploadStreamDescriptor(_x2) {
        return _getUploadStreamDescriptor.apply(this, arguments);
      }

      return getUploadStreamDescriptor;
    }()
  }, {
    key: "getDownloadStream",
    value: function () {
      var _getDownloadStream = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3) {
        var _ref3$usePrivateBucke, usePrivateBucket, fileData, s3, params;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ref3$usePrivateBucke = _ref3.usePrivateBucket, usePrivateBucket = _ref3$usePrivateBucke === void 0 ? true : _ref3$usePrivateBucke, fileData = _objectWithoutProperties(_ref3, _excluded2);
                this.validatePrivateBucketConfiguration_(usePrivateBucket);
                this.updateAwsConfig_(usePrivateBucket);
                s3 = new _awsSdk["default"].S3();
                params = {
                  Bucket: usePrivateBucket ? this.private_bucket_ : this.bucket_,
                  Key: "".concat(fileData.fileKey)
                };
                return _context3.abrupt("return", s3.getObject(params).createReadStream());

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getDownloadStream(_x3) {
        return _getDownloadStream.apply(this, arguments);
      }

      return getDownloadStream;
    }()
  }, {
    key: "getPresignedDownloadUrl",
    value: function () {
      var _getPresignedDownloadUrl = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref4) {
        var _ref4$usePrivateBucke, usePrivateBucket, fileData, s3, params;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _ref4$usePrivateBucke = _ref4.usePrivateBucket, usePrivateBucket = _ref4$usePrivateBucke === void 0 ? true : _ref4$usePrivateBucke, fileData = _objectWithoutProperties(_ref4, _excluded3);
                this.validatePrivateBucketConfiguration_(usePrivateBucket);
                this.updateAwsConfig_(usePrivateBucket, {
                  signatureVersion: "v4"
                });
                s3 = new _awsSdk["default"].S3();
                params = {
                  Bucket: usePrivateBucket ? this.private_bucket_ : this.bucket_,
                  Key: "".concat(fileData.fileKey),
                  Expires: this.downloadUrlDuration
                };
                _context4.next = 7;
                return s3.getSignedUrlPromise("getObject", params);

              case 7:
                return _context4.abrupt("return", _context4.sent);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getPresignedDownloadUrl(_x4) {
        return _getPresignedDownloadUrl.apply(this, arguments);
      }

      return getPresignedDownloadUrl;
    }()
  }, {
    key: "validatePrivateBucketConfiguration_",
    value: function validatePrivateBucketConfiguration_(usePrivateBucket) {
      if (usePrivateBucket && !this.private_bucket_) {
        throw new _medusaCoreUtils.MedusaError(_medusaCoreUtils.MedusaError.Types.INVALID_CONFIGURATION, "Private bucket is not configured");
      }
    }
  }, {
    key: "updateAwsConfig_",
    value: function updateAwsConfig_() {
      var usePrivateBucket = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var additionalConfiguration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _awsSdk["default"].config.setPromisesDependency(null);

      _awsSdk["default"].config.update(_objectSpread({
        accessKeyId: usePrivateBucket ? this.private_access_key_id_ : this.accessKeyId_,
        secretAccessKey: usePrivateBucket ? this.private_secret_access_key_ : this.secretAccessKey_,
        endpoint: this.endpoint_,
        s3ForcePathStyle: this.s3ForcePathStyle_,
        signatureVersion: this.signatureVersion_
      }, additionalConfiguration), true);
    }
  }]);

  return MinioService;
}(_medusa.AbstractFileService);

var _default = MinioService;
exports["default"] = _default;